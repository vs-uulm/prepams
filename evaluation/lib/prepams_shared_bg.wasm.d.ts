/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_issuer_free(a: number): void;
export function issuer_serialize(a: number, b: number): void;
export function issuer_deserialize(a: number, b: number): void;
export function issuer_serializeBase64(a: number, b: number): void;
export function issuer_deserializeBase64(a: number, b: number, c: number): void;
export function issuer_serializeBinary(a: number, b: number): void;
export function issuer_deserializeBinary(a: number, b: number, c: number): void;
export function issuer_new(a: number): void;
export function issuer_publicKey(a: number, b: number): void;
export function issuer_issueCredential(a: number, b: number, c: number): void;
export function issuer_checkRewardSignature(a: number, b: number, c: number): void;
export function issuer_checkResourceSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function issuer_checkPayoutRequest(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_organizer_free(a: number): void;
export function organizer_serialize(a: number, b: number): void;
export function organizer_deserialize(a: number, b: number): void;
export function organizer_serializeBase64(a: number, b: number): void;
export function organizer_deserializeBase64(a: number, b: number, c: number): void;
export function organizer_serializeBinary(a: number, b: number): void;
export function organizer_deserializeBinary(a: number, b: number, c: number): void;
export function organizer_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function organizer_publicKey(a: number): number;
export function organizer_role(a: number): number;
export function organizer_id(a: number, b: number): void;
export function organizer_checkParticipation(a: number, b: number, c: number): void;
export function organizer_signResource(a: number, b: number, c: number, d: number): void;
export function organizer_issueReward(a: number, b: number, c: number): void;
export function organizer_identity(a: number, b: number): void;
export function __wbg_reward_free(a: number): void;
export function reward_serialize(a: number, b: number): void;
export function reward_deserialize(a: number, b: number): void;
export function reward_serializeBase64(a: number, b: number): void;
export function reward_deserializeBase64(a: number, b: number, c: number): void;
export function reward_serializeBinary(a: number, b: number): void;
export function reward_deserializeBinary(a: number, b: number, c: number): void;
export function __wbg_participation_free(a: number): void;
export function participation_serialize(a: number, b: number): void;
export function participation_deserialize(a: number, b: number): void;
export function participation_serializeBase64(a: number, b: number): void;
export function participation_deserializeBase64(a: number, b: number, c: number): void;
export function participation_serializeBinary(a: number, b: number): void;
export function participation_deserializeBinary(a: number, b: number, c: number): void;
export function __wbg_resource_free(a: number): void;
export function resource_new(a: number, b: number): void;
export function resource_serialize(a: number, b: number): void;
export function resource_deserialize(a: number, b: number): void;
export function resource_serializeBase64(a: number, b: number): void;
export function resource_deserializeBase64(a: number, b: number, c: number): void;
export function resource_serializeBinary(a: number, b: number): void;
export function resource_deserializeBinary(a: number, b: number, c: number): void;
export function resource_id(a: number, b: number): void;
export function __wbg_participant_free(a: number): void;
export function participant_deserialize(a: number, b: number): void;
export function participant_serializeBase64(a: number, b: number): void;
export function participant_deserializeBase64(a: number, b: number, c: number): void;
export function participant_serializeBinary(a: number, b: number): void;
export function participant_deserializeBinary(a: number, b: number, c: number): void;
export function participant_new(a: number, b: number): number;
export function participant_data(a: number, b: number): void;
export function participant_role(a: number): number;
export function participant_id(a: number, b: number): void;
export function participant_requestCredential(a: number, b: number, c: number, d: number, e: number): void;
export function participant_retrieveCredential(a: number, b: number, c: number): void;
export function participant_participate(a: number, b: number, c: number): void;
export function participant_getBalance(a: number, b: number, c: number, d: number): void;
export function participant_requestPayout(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function participant_serialize(a: number, b: number): void;
export function participant_identity(a: number, b: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
